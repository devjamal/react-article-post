{"version":3,"sources":["pages/Home.jsx","pages/article-content.js","components/ArticleList.jsx","pages/ArticleListPage.jsx","pages/About.jsx","pages/NotFoundPage.jsx","components/Commentlist.jsx","components/UpvoteSection.jsx","components/AddcommentForm.jsx","pages/Article.jsx","Navbar.jsx","components/FoterSection.jsx","App.js","serviceWorker.js","index.js"],"names":["Home","useEffect","document","title","Fragment","articles","name","content","ArticlesList","map","article","key","className","to","substring","ArticleListPage","ArticleList","articleContent","About","NotFoundPage","CommentsList","comments","comment","username","text","UpvotesSection","articleName","upvotes","setArticleInfo","upvoteArticle","a","fetch","method","result","json","body","id","onClick","AddCommentForm","useState","setUsername","commentText","setCommentText","addComment","JSON","stringify","headers","type","value","onChange","event","target","rows","cols","Article","match","params","find","articleInfo","console","log","fetchData","otherArticles","filter","paragraph","Navbar","FoterSection","href","aria-hidden","App","path","exact","component","style","paddingTop","Boolean","window","location","hostname","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.84826d51.chunk.js","sourcesContent":["import React, { useEffect } from \"react\";\r\n\r\nexport default function Home() {\r\n  useEffect(() => {\r\n    document.title = \"Home | Jamal\";\r\n  }, []);\r\n  return (\r\n    <React.Fragment>\r\n      <h3>Best Articles</h3>\r\n      <p>\r\n        This page shares my best articles to read on topics like health,\r\n        happiness, creativity, productivity and more. The central question that\r\n        drives my work is, “How can we live better?” To answer that question, I\r\n        like to write about science-based ways to solve practical problems.\r\n      </p>\r\n\r\n      <p>\r\n        You’ll find interesting articles to read on topics like how to stop\r\n        procrastinating as well as personal recommendations like my list of the\r\n        best books to read and my minimalist travel guide. Ready to dive in? You\r\n        can use the categories below to browse my best articles or scroll down\r\n        to see every post by date and title.\r\n      </p>\r\n      <p>\r\n        Scroll down to browse all of my articles by date and title. Articles are\r\n        listed in reverse chronological order with my newest articles at the top\r\n        and my oldest essays at the bottom.\r\n      </p>\r\n    </React.Fragment>\r\n  );\r\n}\r\n","const articles = [\n    {\n        name: 'learn-react',\n        title: 'The Fastest Way to Learn React',\n        content: [\n            `After we got clarity about learning only React and React's prerequisites, let's see how to learn React from zero from there. I strongly believe the best start is going through the official React documentation. The documentation keeps up with the recent changes, is not biased, teaches you everything the React way, and is put together by the React core team and the React community in your interest\n            Being referred to the documentation of a library as a beginner in web development can be intimidating. But I strongly believe it's the best way to learn something new. On your career path to becoming a developer, you will get used to learn new things with the documentation of the new thing, so why not get used to it now? It comes with certain benefits to learn documentation driven:\n            `,\n            `beginner tutorial\n            no commercial interest\n            opinionated way of doing things\n            thoughtfully put together by core contributors and community\n            latest material and updates for new versions\n            API references\n            Every time I pick up a new tech, I don't check any courses or books, I go straight to the tech's documentation and check whether there is a beginner tutorial. Often there is one and that's my entry point into a new world. From there, I can always check for other learning material, but my starting point will always be the official documentation of the new thing I intend to learn. After all, that's why I write my tutorials and books in close relation to the documentation by always refereing it in my guides. That's how beginners learn to use the documentation and that's what will make them more efficient and effecrtive when learning a new tech in the future.`,\n            `Learn React with Projects\n            After you went through the React beginner tutorial from the React documentation and learned the basics of React from scratch, continue learning by building a project yourself before learning any other tech. It's not always simple to come up with project ideas, but there is plenty of inspiration out there.\n            \n            For instance, there are also people who want to learn React by building games. I guess you will find plenty of React Tic Tac Toe implementations out there. Implement the game in React yourself and compare your solution to the other solutions. You will learn from your mistakes and learn to evaluate your source code against the implementation by others.`,\n            `Learn React by Doing\n            Learn React by doing is one of the most common recommendations you will get to hear from other developers, it applies to almost everything in life, because every task will present you with a new challenge to grow as a React developer. Also it is too easy to passively consume video courses, books, and tutorials. Get your hands dirty and implement something yourself. Get stuck with a problem, become desperate, ponder over the problem by taking time off the screen, solve the problem eventually, and reap the fruits of it. That's the basic framework of learning anything.\n             `, `Learn React every Day\n             Confront yourself to stick to coding every day. You can participate in the 100 Days of Code challenge, write about it on Twitter or on your website. Make it a daily habit. Only when sticking to it for a while, by having the persistence and by coding every day, you will eventually become a React developer. It's a marathon and not a sprint.\n             `, `Learn React in Public\n             The best way to learn something new is to learn it in public. Confront yourself with the feedback from other React developers by showing off your achievements. If you have reached a milestone with your React project, show it to others and ask for their feedback. These are a couple of commonly known platforms to share ideas around React:`, `Step 5: Start server\n             Twitter\nReddit\nReactiflux\nSpectrum\nYou will not only get feedback from people there, but also dive more into React by joining discussions. Be part of the community. Another great way to learn something new yourself is to explain it to someone else. Maybe you are one step ahead of a fellow React beginner and can help them out. Checkout the React Beginner Thread in the React Subreddit where you can help fellow React developers to solve their proble\n             `, `Learn to use React\n             After you went through the beginner tutorial in React's docs and started to implement a React project yourself, learn to use React with all its facets. React has only a slim API surface area, so try to get proficient with it.\n             \n             Learn about React's JSX syntax\n             Learn about React Components\n             Learn about React Component Composition\n             Learn about React Props\n             Learn about React State\n             Learn and understand React. In the end, it doesn't need much to create a React component that returns JSX, to use a React component in another React component while arranging them in a component hierarchy, to pass data from component to component with props, and to make components interactive with state. That's the gist of React. Learn React in depth by applying your learned skills in your project and not by consuming endless of content.`\n        ]\n    }, {\n        name: 'learn-node',\n        title: 'How to Build a Node Server in 10 Minutes',\n        content: [\n            `Step 1: Install node\n            Ok, this must take more than 5 minutes, but if you have Node already, skip this and let's go!\n            \n            Install latest LTS version for your OS\n            https://nodejs.org/en/download/\n            To test if it works, create a file server.js in your project root\n            // server.js\n            console.log(\"Hello World!\");\n            `,\n            `And test it out\n            $ node server.js\n            Hello world!\n            Nice! We're ready to do some backend-fu!`,\n            `Step 2: Setup npm\n            We use NPM to manage our node packages.\n            Initialize npm and let it take defaults.`,\n            `Step 3: Install and import express middleware\n            A middleware is a piece of code that has access to the request and response object. For now,\n             think about express making things easier for us by being a \"middle-man\" 🕵️ \n             between our code and Node's HTTP stuff.\n             $ npm install express\n                // server.js\n                const express = require('express');\n                const server = express();\n             `, `Step 4: Add a JSON route handler\n             Whenever client requests/accesses \"/json\" (localhost:4000/json), send JSON which is \"Hello world\" message`,\n            `server.get(\"/json\", (req, res) => {\n                res.json({ message: \"Hello world\" });\n             });\n             `, `Step 5: Add a HTML route handler\n             Whenever client requests/accesses \"/\" (localhost:4000), send file which is an HTML page\n             \n             __dirname holds the directory of current module (server.js) ...\n             server.get(\"/\", (req, res) => {\n                res.sendFile(__dirname + '/index.html');\n             });\n             Create index.html in same level as server.js\n             Go to town with the HTML! Or you can copy-paste this if you like blue headings.`, `<!DOCTYPE html>\n             <html lang=\"en\">\n              <head>\n                <title>Node Workshop</title>\n              </head>\n              <body>\n                  <h1 style=\"color: blue;\">\n                     Express: HELLO WORLD\n                  </h1>\n              </body>\n             </html>`, `Step 5: Start server\n             // server.js\n             ...\n             const port = 4000;\n             \n             server.listen(port, () => {\n                 console.log('Server listening at { port});\n             });\n             # CTRL+C to stop server if currently running\n             $ npm start\n             `, `Step 6: Test\n             # on another terminal\n             \n             $ curl http://localhost:4000/json\n             {\"message\":\"Hello world\"}\n             \n             $ curl http://localhost:4000\n             <!-- index.html --> ...\n             Or open a browser and go to\n             \n             http://localhost:4000/json\n             http://localhost:4000`,\n        ]\n    }, {\n        name: 'my-thought-on-resumes',\n        title: 'My Thoughts on Resumes',\n        content: [\n            `Today is the day I talk about something which scares most people: resumes.\n            In reality, I'm not sure why people have such a hard time with proin congue\n            ligula id risus posuere, vel eleifend ex egestas. Sed in turpis leo. \n            Aliquam malesuada in massa tincidunt egestas. Nam consectetur varius turpis, \n            non porta arcu porttitor non. In tincidunt vulputate nulla quis egestas. Ut \n            eleifend ut ipsum non fringilla. Praesent imperdiet nulla nec est luctus, at \n            sodales purus euismod.`,\n            `Donec vel mauris lectus. Etiam nec lectus urna. Sed sodales ultrices dapibus. \n            Nam blandit tristique risus, eget accumsan nisl interdum eu. Aenean ac accumsan \n            nisi. Nunc vel pulvinar diam. Nam eleifend egestas viverra. Donec finibus lectus \n            sed lorem ultricies, eget ornare leo luctus. Morbi vehicula, nulla eu tempor \n            interdum, nibh elit congue tellus, ac vulputate urna lorem nec nisi. Morbi id \n            consequat quam. Vivamus accumsan dui in facilisis aliquet.`,\n            `Etiam nec lectus urna. Sed sodales ultrices dapibus. \n            Nam blandit tristique risus, eget accumsan nisl interdum eu. Aenean ac accumsan \n            nisi. Nunc vel pulvinar diam. Nam eleifend egestas viverra. Donec finibus lectus \n            sed lorem ultricies, eget ornare leo luctus. Morbi vehicula, nulla eu tempor \n            interdum, nibh elit congue tellus, ac vulputate urna lorem nec nisi. Morbi id \n            consequat quam. Vivamus accumsan dui in facilisis aliquet.`,\n        ]\n    },\n    {\n        name: 'learn-angular',\n        title: 'What is Angular',\n        content: [\n            `What is Angular?\n            Angular is an open source web application framework lead by Google and by community developers.`,\n            `It is based on TypeScript which is a strict syntactical superset of JavaScript which adds optional static typing to the language. While Typescript needs to be compiled it does offer a benefit in prototyping.\n            `, `Getting Started\n            To use the Angular framework you should be familiar with:\n            \n            JavaScript\n            HTML\n            CSS`, `Another important thing to understand is that Angular apps require libraries that are available as npm packages.\n\n            Step 1: Install the Angular CLI 👨‍💻\n            To install the CLI using npm, open the terminal and enter\n            npm install -g @angular/cli`, `Step 2: Create a workspace and initial application 👷‍♂️\n            To create a new workspace and initial starter app:\n            \n            Run the CLI command ng new and provide the name my-application, as shown here:\n            ng new my-application\n            `,\n            `Angular will now get to work building the application. The client will create all folders and files necessary.\n\n            To run type:\n            ng serve\n            This will run the application through localhost:4200/`,\n        ]\n    },\n];\n\n\n\n\nexport default articles;","import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nconst ArticlesList = ({ articles }) => (\r\n  <>\r\n    {articles.map((article, key) => (\r\n      <Link\r\n        className=\"article-list-item\"\r\n        key={key}\r\n        to={`/article/${article.name}`}\r\n      >\r\n        <h3>{article.title}</h3>\r\n        <p>{article.content[0].substring(0, 150)}...</p>\r\n      </Link>\r\n    ))}\r\n  </>\r\n);\r\n\r\nexport default ArticlesList;\r\n","import React, { useEffect } from \"react\";\r\nimport articleContent from \"./article-content\";\r\nimport ArticleList from \"../components/ArticleList\";\r\n\r\nconst ArticleListPage = () => {\r\n  useEffect(() => {\r\n    document.title = \"Article  List \";\r\n  }, []);\r\n\r\n  return (\r\n    <div>\r\n      <h1>Article List :-</h1>\r\n      <ArticleList articles={articleContent} />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ArticleListPage;\r\n","import React, { useEffect } from \"react\";\r\n\r\nconst About = () => {\r\n  useEffect(() => {\r\n    document.title = \"About Page\";\r\n  }, []);\r\n\r\n  return (\r\n    <div>\r\n      <h1>About me</h1>\r\n      <h3>I'm a web developer.</h3>\r\n      <p>\r\n        I enjoy turning complex problems into simple, beautiful and intuitive\r\n        designs. When I'm not coding,writing , listening podcast,watching\r\n        movie,reading and tweeting or pushing pixels.\r\n      </p>\r\n      <p>\r\n        Donec vel mauris lectus. Etiam nec lectus urna. Sed sodales ultrices\r\n        dapibus. Nam blandit tristique risus, eget accumsan nisl interdum eu.\r\n        Aenean ac accumsan nisi. Nunc vel pulvinar diam. Nam eleifend egestas\r\n        viverra. Donec finibus lectus sed lorem ultricies, eget ornare leo\r\n        luctus. Morbi vehicula, nulla eu tempor interdum, nibh elit congue\r\n        tellus, ac vulputate urna lorem nec nisi. Morbi id consequat quam.\r\n        Vivamus accumsan dui in facilisis aliquet.,\r\n      </p>\r\n      <p>\r\n        UI design is all about problem-solving. The result is an interface\r\n        that’s simple, beautiful and easy to use. I’ve read quite a few UI\r\n        design books over the years and they’ve definitely helped me gain a\r\n        solid foundation in the principles of interface design. I love reading,\r\n        but there are only so many hours in a day, so you need to choose your\r\n        books wisely. With so many UI design books out there, it’s sometimes\r\n        hard to figure out which ones are worth reading. With this in mind, I’ve\r\n        put together a list of my favourite UI design books that I hope you’ll\r\n        find helpful. Let me know what your own favourites are and how they’ve\r\n        improved your UI design process.\r\n      </p>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default About;\r\n","import React from \"react\";\r\n\r\nconst NotFoundPage = () => (\r\n  <>\r\n    <h1>404 Page Not Found</h1>\r\n  </>\r\n);\r\n\r\nexport default NotFoundPage;\r\n","import React from \"react\";\r\n\r\nconst CommentsList = ({ comments }) => (\r\n  <>\r\n    <h3>Comments:</h3>\r\n    {comments.map((comment, key) => (\r\n      <div className=\"comment\" key={key}>\r\n        <h4>{comment.username}</h4>\r\n        <p>{comment.text}</p>\r\n      </div>\r\n    ))}\r\n  </>\r\n);\r\n\r\nexport default CommentsList;\r\n","import React from \"react\";\r\n\r\nconst UpvotesSection = ({ articleName, upvotes, setArticleInfo }) => {\r\n  const upvoteArticle = async () => {\r\n    const result = await fetch(\r\n      `http://localhost:8000/api/articles/${articleName}/upvote`,\r\n      {\r\n        method: \"post\",\r\n      }\r\n    );\r\n    const body = await result.json();\r\n    setArticleInfo(body);\r\n  };\r\n  return (\r\n    <div id=\"upvotes-section\">\r\n      <button onClick={() => upvoteArticle()}>Add Upvote</button>\r\n\r\n      <p>\r\n        &nbsp; This post got upvoted {upvotes}\r\n        <i className=\"fa fa-heart \" onClick={() => upvoteArticle()}></i>\r\n        times\r\n      </p>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default UpvotesSection;\r\n","import React, { useState } from \"react\";\r\n\r\nconst AddCommentForm = ({ articleName, setArticleInfo }) => {\r\n  const [username, setUsername] = useState(\"\");\r\n  const [commentText, setCommentText] = useState(\"\");\r\n\r\n  const addComment = async () => {\r\n    const result = await fetch(\r\n      `http://localhost:8000/api/articles/${articleName}/add-comment`,\r\n      {\r\n        method: \"post\",\r\n        body: JSON.stringify({ username, text: commentText }),\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n        },\r\n      }\r\n    );\r\n    const body = await result.json();\r\n    setArticleInfo(body);\r\n    setUsername(\"\");\r\n    setCommentText(\"\");\r\n  };\r\n\r\n  return (\r\n    <div id=\"add-comment-form\">\r\n      <h3>Add a Comment</h3>\r\n      <label>\r\n        Name:\r\n        <input\r\n          type=\"text\"\r\n          value={username}\r\n          onChange={(event) => setUsername(event.target.value)}\r\n        />\r\n      </label>\r\n      <label>\r\n        Comment:\r\n        <textarea\r\n          rows=\"4\"\r\n          cols=\"50\"\r\n          value={commentText}\r\n          onChange={(event) => setCommentText(event.target.value)}\r\n        />\r\n      </label>\r\n      <button onClick={() => addComment()}>Add Comment</button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default AddCommentForm;\r\n","import React, { useEffect, useState } from \"react\";\r\nimport articleContent from \"./article-content\";\r\nimport ArticleList from \"../components/ArticleList\";\r\nimport NotFoundPage from \"../pages/NotFoundPage\";\r\nimport CommentsList from \"../components/Commentlist\";\r\nimport UpvotesSection from \"../components/UpvoteSection\";\r\nimport AddComponent from \"../components/AddcommentForm\";\r\n\r\nconst Article = ({ match }) => {\r\n  const name = match.params.name;\r\n  const article = articleContent.find((article) => article.name === name);\r\n\r\n  const [articleInfo, setArticleInfo] = useState({ upvotes: 0, comments: [] });\r\n\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      const result = await fetch(`api/article/${name}`);\r\n      const body = await result.json();\r\n      console.log(\"body\", body);\r\n      setArticleInfo(body);\r\n    };\r\n    fetchData();\r\n  }, [name]);\r\n\r\n  if (!article) {\r\n    return <NotFoundPage />;\r\n  }\r\n  const otherArticles = articleContent.filter(\r\n    (article) => article.name !== name\r\n  );\r\n\r\n  return (\r\n    <>\r\n      <h1>{article.title}</h1>\r\n      <UpvotesSection\r\n        articleName={name}\r\n        upvotes={articleInfo.upvotes}\r\n        setArticleInfo={setArticleInfo}\r\n      />\r\n\r\n      {article.content.map((paragraph, key) => (\r\n        <p key={key}>{paragraph}</p>\r\n      ))}\r\n      <CommentsList comments={articleInfo.comments} />\r\n      <AddComponent articleName={name} setArticleInfo={setArticleInfo} />\r\n      <h3>Other Articles:</h3>\r\n      <ArticleList articles={otherArticles} />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Article;\r\n","import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nconst Navbar = () => {\r\n  return (\r\n    <nav>\r\n      <ul>\r\n        <li>\r\n          <Link to=\"/\">Home</Link>\r\n        </li>\r\n        <li>\r\n          <Link to=\"/about\">About</Link>\r\n        </li>\r\n        <li>\r\n          <Link to=\"/article-list\">Articles</Link>\r\n        </li>\r\n      </ul>\r\n    </nav>\r\n  );\r\n};\r\n\r\nexport default Navbar;\r\n","import React from \"react\";\r\n\r\nexport default function FoterSection() {\r\n  return (\r\n    <>\r\n      <footer id=\"footer\">\r\n        <p>&copy;Article Post 2020</p>\r\n        <button className=\"btn btn-footer\">\r\n          <a href=\"https://github.com/devjamal\" target=\"_blank\">\r\n            <i className=\"fa fa-github\" aria-hidden=\"true\"></i>\r\n          </a>\r\n        </button>\r\n        <button className=\"btn btn-footer\">\r\n          <a href=\"https://www.freecodecamp.org/rahul626\" target=\"_blank\">\r\n            <i className=\"fa fa-free-code-camp\" aria-hidden=\"true\"></i>\r\n          </a>\r\n        </button>\r\n        <button className=\"btn btn-footer\">\r\n          <a href=\"https://www.linkedin.com/in/devjamal/\" target=\"_blank\">\r\n            <i className=\"fa fa-linkedin\" aria-hidden=\"true\"></i>\r\n          </a>\r\n        </button>\r\n        <button className=\"btn btn-footer\">\r\n          <a href=\"https://twitter.com/unsuredev\" target=\"_blank\">\r\n            <i className=\"fa fa-twitter\" aria-hidden=\"true\"></i>\r\n          </a>\r\n        </button>\r\n      </footer>\r\n    </>\r\n  );\r\n}\r\n","import React from \"react\";\nimport \"./App.css\";\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\nimport Home from \"./pages/Home\";\nimport ArticleListPage from \"./pages/ArticleListPage\";\nimport About from \"./pages/About\";\nimport Article from \"./pages/Article\";\nimport Navbar from \"../src/Navbar\";\nimport NotFoundPage from \"../src/pages/NotFoundPage\";\nimport FoterSection from \"./components/FoterSection\";\n\nfunction App() {\n  return (\n    <Router>\n      <div className=\"App\">\n        <Navbar />\n        <div id=\"page-body\">\n          <Switch>\n            <Route path=\"/\" exact component={Home}></Route>\n            <Route path=\"/about\" component={About}></Route>\n            <Route path=\"/article-list\" component={ArticleListPage}></Route>\n            <Route path=\"/article/:name\" component={Article}></Route>\n            <Route component={NotFoundPage}></Route>\n          </Switch>\n          <div style={{ paddingTop: '3em' }}>\n\n          </div>\n          <FoterSection />\n        </div>\n      </div>\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import 'whatwg-fetch';\n\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}